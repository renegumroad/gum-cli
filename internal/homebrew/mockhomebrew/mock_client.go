// Code generated by mockery v2.43.2. DO NOT EDIT.

package mockhomebrew

import (
	homebrew "github.com/renegumroad/gum-cli/internal/homebrew"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// EnsureInstalled provides a mock function with given fields: pkg
func (_m *MockClient) EnsureInstalled(pkg homebrew.Package) error {
	ret := _m.Called(pkg)

	if len(ret) == 0 {
		panic("no return value specified for EnsureInstalled")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(homebrew.Package) error); ok {
		r0 = rf(pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_EnsureInstalled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureInstalled'
type MockClient_EnsureInstalled_Call struct {
	*mock.Call
}

// EnsureInstalled is a helper method to define mock.On call
//   - pkg homebrew.Package
func (_e *MockClient_Expecter) EnsureInstalled(pkg interface{}) *MockClient_EnsureInstalled_Call {
	return &MockClient_EnsureInstalled_Call{Call: _e.mock.On("EnsureInstalled", pkg)}
}

func (_c *MockClient_EnsureInstalled_Call) Run(run func(pkg homebrew.Package)) *MockClient_EnsureInstalled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(homebrew.Package))
	})
	return _c
}

func (_c *MockClient_EnsureInstalled_Call) Return(_a0 error) *MockClient_EnsureInstalled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_EnsureInstalled_Call) RunAndReturn(run func(homebrew.Package) error) *MockClient_EnsureInstalled_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function with given fields: pkg
func (_m *MockClient) Install(pkg homebrew.Package) error {
	ret := _m.Called(pkg)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(homebrew.Package) error); ok {
		r0 = rf(pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MockClient_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - pkg homebrew.Package
func (_e *MockClient_Expecter) Install(pkg interface{}) *MockClient_Install_Call {
	return &MockClient_Install_Call{Call: _e.mock.On("Install", pkg)}
}

func (_c *MockClient_Install_Call) Run(run func(pkg homebrew.Package)) *MockClient_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(homebrew.Package))
	})
	return _c
}

func (_c *MockClient_Install_Call) Return(_a0 error) *MockClient_Install_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Install_Call) RunAndReturn(run func(homebrew.Package) error) *MockClient_Install_Call {
	_c.Call.Return(run)
	return _c
}

// IsInstalled provides a mock function with given fields: pkg
func (_m *MockClient) IsInstalled(pkg homebrew.Package) bool {
	ret := _m.Called(pkg)

	if len(ret) == 0 {
		panic("no return value specified for IsInstalled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(homebrew.Package) bool); ok {
		r0 = rf(pkg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_IsInstalled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInstalled'
type MockClient_IsInstalled_Call struct {
	*mock.Call
}

// IsInstalled is a helper method to define mock.On call
//   - pkg homebrew.Package
func (_e *MockClient_Expecter) IsInstalled(pkg interface{}) *MockClient_IsInstalled_Call {
	return &MockClient_IsInstalled_Call{Call: _e.mock.On("IsInstalled", pkg)}
}

func (_c *MockClient_IsInstalled_Call) Run(run func(pkg homebrew.Package)) *MockClient_IsInstalled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(homebrew.Package))
	})
	return _c
}

func (_c *MockClient_IsInstalled_Call) Return(_a0 bool) *MockClient_IsInstalled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_IsInstalled_Call) RunAndReturn(run func(homebrew.Package) bool) *MockClient_IsInstalled_Call {
	_c.Call.Return(run)
	return _c
}

// Link provides a mock function with given fields: pkg
func (_m *MockClient) Link(pkg homebrew.Package) error {
	ret := _m.Called(pkg)

	if len(ret) == 0 {
		panic("no return value specified for Link")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(homebrew.Package) error); ok {
		r0 = rf(pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Link_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Link'
type MockClient_Link_Call struct {
	*mock.Call
}

// Link is a helper method to define mock.On call
//   - pkg homebrew.Package
func (_e *MockClient_Expecter) Link(pkg interface{}) *MockClient_Link_Call {
	return &MockClient_Link_Call{Call: _e.mock.On("Link", pkg)}
}

func (_c *MockClient_Link_Call) Run(run func(pkg homebrew.Package)) *MockClient_Link_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(homebrew.Package))
	})
	return _c
}

func (_c *MockClient_Link_Call) Return(_a0 error) *MockClient_Link_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Link_Call) RunAndReturn(run func(homebrew.Package) error) *MockClient_Link_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
